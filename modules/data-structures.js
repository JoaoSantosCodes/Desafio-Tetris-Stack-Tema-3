/**
 * M√≥dulo de Estruturas de Dados - Tetris Expert System
 * Cont√©m as classes fundamentais: Peca, FilaCircular, PilhaReserva e SistemaExpert
 */

/**
 * Classe que representa uma pe√ßa do Tetris
 * Baseada na estrutura original do c√≥digo C
 */
export class Peca {
    /**
     * Construtor da pe√ßa
     * @param {string} tipo - Tipo da pe√ßa (I, O, T, S, Z, J, L)
     * @param {number} pontuacao - Pontua√ß√£o base da pe√ßa
     */
    constructor(tipo, pontuacao = 50) {
        this.tipo = tipo;
        this.pontuacao = pontuacao;
        this.timestamp = Date.now();
    }
}

/**
 * Implementa√ß√£o de uma fila circular para gerenciar pe√ßas
 * Estrutura de dados fundamental do sistema expert
 */
export class FilaCircular {
    /**
     * Inicializa a fila circular com capacidade para 5 pe√ßas
     */
    constructor() {
        this.pecas = new Array(5).fill(null);
        this.indiceFrente = 0;  // √çndice do primeiro elemento
        this.indiceTras = 0;    // √çndice onde inserir pr√≥ximo elemento
        this.quantidadePecas = 0;
    }

    /**
     * Verifica se a fila est√° vazia
     * @returns {boolean} True se a fila estiver vazia
     */
    filaVazia() {
        return this.quantidadePecas === 0;
    }

    /**
     * Verifica se a fila est√° cheia
     * @returns {boolean} True se a fila estiver cheia
     */
    filaCheia() {
        return this.quantidadePecas === 5;
    }

    /**
     * Insere uma nova pe√ßa no final da fila
     * @param {Peca} peca - Pe√ßa a ser inserida
     * @returns {boolean} True se a inser√ß√£o foi bem-sucedida
     */
    inserir(peca) {
        if (this.filaCheia()) {
            console.warn("‚ö†Ô∏è Fila cheia! N√£o √© poss√≠vel inserir nova pe√ßa.");
            return false;
        }

        this.pecas[this.indiceTras] = peca;
        this.indiceTras = (this.indiceTras + 1) % 5;
        this.quantidadePecas++;
        
        console.log(`‚úÖ Pe√ßa ${peca.tipo} inserida na fila. Total: ${this.quantidadePecas}`);
        return true;
    }

    /**
     * Remove e retorna a primeira pe√ßa da fila
     * @returns {Peca|null} A pe√ßa removida ou null se a fila estiver vazia
     */
    remover() {
        if (this.filaVazia()) {
            console.warn("‚ö†Ô∏è Fila vazia! N√£o h√° pe√ßas para jogar.");
            return null;
        }

        const peca = this.pecas[this.indiceFrente];
        this.pecas[this.indiceFrente] = null;
        this.indiceFrente = (this.indiceFrente + 1) % 5;
        this.quantidadePecas--;
        
        console.log(`üéÆ Pe√ßa ${peca.tipo} jogada da fila. Restam: ${this.quantidadePecas}`);
        return peca;
    }

    /**
     * Obt√©m uma pe√ßa por √≠ndice sem remov√™-la
     * @param {number} index - √çndice da pe√ßa (0 = primeira)
     * @returns {Peca|null} A pe√ßa no √≠ndice especificado
     */
    obterPecaPorIndice(index) {
        if (index < 0 || index >= this.quantidadePecas) {
            return null;
        }
        
        const indiceReal = (this.indiceFrente + index) % 5;
        return this.pecas[indiceReal];
    }

    /**
     * Otimiza a ordem das pe√ßas na fila baseado em valor de pontua√ß√£o
     * Reorganiza para maximizar efici√™ncia do sistema expert
     */
    otimizar() {
        // Coletar todas as pe√ßas ativas
        const pecasAtivas = [];
        for (let i = 0; i < this.quantidadePecas; i++) {
            pecasAtivas.push(this.obterPecaPorIndice(i));
        }
        
        // Ordenar por valor de pontua√ß√£o (pe√ßas mais valiosas primeiro)
        pecasAtivas.sort((a, b) => {
            const valorA = this.getValorPeca(a.tipo);
            const valorB = this.getValorPeca(b.tipo);
            return valorB - valorA;
        });
        
        // Reinicializar fila e recolocar pe√ßas ordenadas
        this.pecas.fill(null);
        this.indiceFrente = 0;
        this.indiceTras = 0;
        this.quantidadePecas = 0;
        
        pecasAtivas.forEach(peca => this.inserirPeca(peca));
    }

    /**
     * Retorna o valor de pontua√ß√£o base de uma pe√ßa
     * @param {string} tipo - Tipo da pe√ßa
     * @returns {number} Valor de pontua√ß√£o da pe√ßa
     */
    getValorPeca(tipo) {
        const valores = { 
            'I': 100,  // Pe√ßa linha - mais valiosa
            'T': 80,   // Pe√ßa T - vers√°til
            'L': 60,   // Pe√ßas L e J - bom valor
            'J': 60, 
            'S': 40,   // Pe√ßas S e Z - valor m√©dio
            'Z': 40, 
            'O': 20    // Pe√ßa quadrado - menor valor
        };
        return valores[tipo] || 0;
    }
}

/**
 * Implementa√ß√£o de uma pilha para reservar pe√ßas estrategicamente
 * Permite armazenar at√© 3 pe√ßas para uso posterior
 */
export class PilhaReserva {
    /**
     * Inicializa a pilha de reserva com capacidade para 3 pe√ßas
     */
    constructor() {
        this.pecas = new Array(3).fill(null);
        this.topo = -1;  // √çndice do topo da pilha (-1 = vazia)
    }

    /**
     * Verifica se a pilha est√° vazia
     * @returns {boolean} True se a pilha estiver vazia
     */
    pilhaVazia() {
        return this.topo === -1;
    }

    /**
     * Verifica se a pilha est√° cheia
     * @returns {boolean} True se a pilha estiver cheia
     */
    pilhaCheia() {
        return this.topo === 2;
    }

    /**
     * Reserva uma pe√ßa no topo da pilha
     * @param {Peca} peca - Pe√ßa a ser reservada
     * @returns {boolean} True se a reserva foi bem-sucedida
     */
    reservarPeca(peca) {
        if (this.pilhaCheia()) {
            console.warn("‚ö†Ô∏è Pilha de reserva cheia! N√£o √© poss√≠vel reservar mais pe√ßas.");
            return false;
        }

        this.topo++;
        this.pecas[this.topo] = peca;
        
        console.log(`üì¶ Pe√ßa ${peca.tipo} reservada. Posi√ß√£o na pilha: ${this.topo + 1}`);
        return true;
    }

    /**
     * Retira e retorna a pe√ßa do topo da pilha
     * @returns {Peca|null} A pe√ßa retirada ou null se a pilha estiver vazia
     */
    retirarPeca() {
        if (this.pilhaVazia()) {
            console.warn("‚ö†Ô∏è Pilha de reserva vazia! N√£o h√° pe√ßas para retirar.");
            return null;
        }

        const peca = this.pecas[this.topo];
        this.pecas[this.topo] = null;
        this.topo--;
        
        console.log(`üéØ Pe√ßa ${peca.tipo} retirada da reserva. Pe√ßas restantes: ${this.topo + 1}`);
        return peca;
    }

    /**
     * Visualiza a pe√ßa do topo sem remov√™-la
     * @returns {Peca|null} A pe√ßa do topo ou null se vazia
     */
    verTopo() {
        if (this.pilhaVazia()) {
            return null;
        }
        return this.pecas[this.topo];
    }

    /**
     * Obt√©m uma pe√ßa por posi√ß√£o na pilha (0 = base, topo = √∫ltimo)
     * @param {number} posicao - Posi√ß√£o na pilha
     * @returns {Peca|null} A pe√ßa na posi√ß√£o especificada
     */
    obterPecaPorPosicao(posicao) {
        if (posicao < 0 || posicao > this.topo) {
            return null;
        }
        return this.pecas[posicao];
    }
}

/**
 * Sistema Expert que gerencia a l√≥gica inteligente do jogo
 * Calcula pontua√ß√µes, detecta combos e analisa performance
 */
export class SistemaExpert {
    /**
     * Inicializa o sistema expert com estat√≠sticas zeradas
     */
    constructor() {
        // Estat√≠sticas gerais do jogo
        this.estatisticas = {
            jogadasTotais: 0,      // Total de pe√ßas jogadas
            jogadasDaFila: 0,      // Pe√ßas jogadas da fila circular
            jogadasDaPilha: 0,     // Pe√ßas jogadas da pilha de reserva
            pecasReservadas: 0,    // Total de pe√ßas reservadas
            eficiencia: 0          // Percentual de efici√™ncia
        };
        
        // Contador de pe√ßas por tipo
        this.contadorPecas = {
            'I': 0, 'O': 0, 'T': 0, 'S': 0, 'Z': 0, 'J': 0, 'L': 0
        };
        
        // Sistema de combos
        this.comboAtual = 0;
        this.ultimaJogada = null;
        
        // Sistema de conquistas e recordes
        this.conquistas = [];
        this.recordePessoal = 0;
    }

    /**
     * Calcula a pontua√ß√£o de uma pe√ßa baseada no tipo e multiplicadores
     * @param {string} tipoPeca - Tipo da pe√ßa jogada
     * @returns {number} Pontua√ß√£o calculada
     */
    calcularPontuacao(tipoPeca) {
        // Pontua√ß√£o base por tipo de pe√ßa
        const pontosBase = this.getValorBasePeca(tipoPeca);
        
        // Multiplicador baseado no total de jogadas (experi√™ncia)
        const multiplicadorExperiencia = 1 + (this.estatisticas.jogadasTotais * 0.01);
        
        // Multiplicador de combo
        const multiplicadorCombo = 1 + (this.comboAtual * 0.1);
        
        const pontuacaoFinal = Math.floor(pontosBase * multiplicadorExperiencia * multiplicadorCombo);
        
        console.log(`üí∞ Pontua√ß√£o calculada para ${tipoPeca}: ${pontuacaoFinal} pontos`);
        return pontuacaoFinal;
    }

    /**
     * Registra uma jogada no sistema expert
     * @param {string} tipoPeca - Tipo da pe√ßa jogada
     * @param {string} origem - Origem da pe√ßa ('fila' ou 'pilha')
     */
    registrarJogada(tipoPeca, origem = 'fila') {
        // Atualizar estat√≠sticas gerais
        this.estatisticas.jogadasTotais++;
        
        if (origem === 'fila') {
            this.estatisticas.jogadasDaFila++;
        } else if (origem === 'pilha') {
            this.estatisticas.jogadasDaPilha++;
        }
        
        // Atualizar contador por tipo
        if (this.contadorPecas.hasOwnProperty(tipoPeca)) {
            this.contadorPecas[tipoPeca]++;
        }
        
        // Detectar combos
        this.detectarCombo(tipoPeca);
        
        // Atualizar efici√™ncia
        this.calcularEficiencia();
        
        console.log(`üìä Jogada registrada: ${tipoPeca} (${origem}). Total: ${this.estatisticas.jogadasTotais}`);
    }

    /**
     * Registra uma pe√ßa reservada
     * @param {string} tipoPeca - Tipo da pe√ßa reservada
     */
    registrarReserva(tipoPeca) {
        this.estatisticas.pecasReservadas++;
        console.log(`üì¶ Reserva registrada: ${tipoPeca}. Total reservado: ${this.estatisticas.pecasReservadas}`);
    }

    /**
     * Detecta e atualiza combos baseado na sequ√™ncia de jogadas
     * @param {string} tipoPeca - Tipo da pe√ßa atual
     */
    detectarCombo(tipoPeca) {
        if (this.ultimaJogada === tipoPeca) {
            this.comboAtual++;
            console.log(`üî• Combo x${this.comboAtual} com pe√ßas ${tipoPeca}!`);
        } else {
            this.comboAtual = 0;
        }
        this.ultimaJogada = tipoPeca;
    }

    /**
     * Calcula a efici√™ncia atual do sistema
     * @returns {number} Percentual de efici√™ncia (0-100)
     */
    calcularEficiencia() {
        if (this.estatisticas.jogadasTotais === 0) {
            return 0;
        }
        
        // Efici√™ncia baseada na propor√ß√£o de uso da fila vs pilha
        const proporcaoFila = this.estatisticas.jogadasDaFila / this.estatisticas.jogadasTotais;
        const proporcaoPilha = this.estatisticas.jogadasDaPilha / this.estatisticas.jogadasTotais;
        
        // Efici√™ncia ideal: 70% fila, 30% pilha
        const eficienciaFila = Math.max(0, 100 - Math.abs(proporcaoFila - 0.7) * 100);
        const eficienciaPilha = Math.max(0, 100 - Math.abs(proporcaoPilha - 0.3) * 100);
        
        this.estatisticas.eficiencia = Math.floor((eficienciaFila + eficienciaPilha) / 2);
        return this.estatisticas.eficiencia;
    }

    /**
     * Verifica progress√£o de n√≠vel baseada na pontua√ß√£o
     * @param {number} pontuacaoAtual - Pontua√ß√£o atual do jogo
     * @returns {number} N√≠vel calculado
     */
    verificarProgressaoNivel(pontuacaoAtual) {
        return Math.floor(pontuacaoAtual / 1000) + 1;
    }

    /**
     * Retorna o valor base de uma pe√ßa
     * @param {string} tipo - Tipo da pe√ßa
     * @returns {number} Valor base da pe√ßa
     */
    getValorBasePeca(tipo) {
        const valores = {
            'I': 100,  // Linha - mais comum, menor valor
            'O': 120,  // Quadrado - vers√°til, valor m√©dio
            'T': 150,  // T - estrat√©gico, valor alto
            'L': 180,  // L - mais complexo, maior valor
            'J': 180,  // J - complexidade similar ao L
            'S': 140,  // S - valor m√©dio-alto
            'Z': 140   // Z - valor m√©dio-alto
        };
        return valores[tipo] || 50;
    }

    /**
     * Gera dica inteligente baseada no estado atual
     * @param {FilaCircular} fila - Fila circular atual
     * @param {PilhaReserva} pilha - Pilha de reserva atual
     * @returns {string} Dica para o jogador
     */
    obterDicaInteligente(fila, pilha) {
        const dicas = [
            "üí° Use a pilha de reserva para pe√ßas estrat√©gicas!",
            "üéØ Pe√ßas 'I' s√£o ideais para linhas m√∫ltiplas!",
            "‚ö° Mantenha um equil√≠brio entre fila e pilha!",
            "üî• Combos aumentam sua pontua√ß√£o!",
            "üìà Otimize a fila para maximizar efici√™ncia!"
        ];
        
        return dicas[Math.floor(Math.random() * dicas.length)];
    }

    /**
     * Reseta todas as estat√≠sticas do sistema expert
     */
    resetar() {
        this.estatisticas = {
            jogadasTotais: 0,
            jogadasDaFila: 0,
            jogadasDaPilha: 0,
            pecasReservadas: 0,
            eficiencia: 0
        };
        
        Object.keys(this.contadorPecas).forEach(tipo => {
            this.contadorPecas[tipo] = 0;
        });
        
        this.comboAtual = 0;
        this.ultimaJogada = null;
        this.conquistas = [];
        
        console.log("üîÑ Sistema Expert resetado!");
    }
}